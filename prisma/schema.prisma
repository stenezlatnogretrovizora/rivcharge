generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BookingRequest BookingRequest[]
  QueueEntry     QueueEntry[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Location {
  id        String    @id @default(cuid())
  city      String
  country   String
  latitude  Float
  longitude Float
  chargers  Charger[]

  @@unique([city, country])
}

model Charger {
  id         String           @id @default(cuid())
  name       String
  colour     String
  locationId String
  location   Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  bookings   BookingRequest[]
}

model BookingRequest {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  charger   Charger       @relation(fields: [chargerId], references: [id], onDelete: Cascade)
  chargerId String
  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(CONFIRMED)
  createdAt DateTime      @default(now())
}

model QueueEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  locationId String
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}
