generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  role            Role             @default(USER)
  sessions        Session[]
  bookingRequests BookingRequest[]
  queueEntries    QueueEntry[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id        String    @id @default(cuid())
  city      String
  country   String
  latitude  Float
  longitude Float
  chargers  Charger[]

  @@unique([city, country])
}

model Charger {
  id         String           @id @default(cuid())
  name       String
  colour     String
  locationId String
  location   Location         @relation(fields: [locationId], references: [id], onDelete: Cascade)
  bookings   BookingRequest[]
}

model BookingRequest {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  charger   Charger       @relation(fields: [chargerId], references: [id], onDelete: Cascade)
  chargerId String
  startTime DateTime
  endTime   DateTime
  status    BookingStatus @default(CONFIRMED)
  createdAt DateTime      @default(now())
}

model QueueEntry {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  locationId String
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
}
